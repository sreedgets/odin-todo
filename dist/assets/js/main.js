(()=>{"use strict";const e=e=>{let t,n=e,o=[];return{getName:function(){return n},setName:function(e){n=e},getPosition:function(){return t},setPosition:function(e){t=e},getTasks:function(){return o}}},t=(()=>{let t=["Default Project"];function n(){return t}return{addStorage:function(){localStorage.getItem("projects")||localStorage.setItem("projects",JSON.stringify(n()))},getStorage:function(){return JSON.parse(localStorage.getItem("projects"))},getProjects:n,saveProjects:function(o){const c=e(o);t.push(c.getName()),localStorage.setItem("projects",JSON.stringify(n()))},deleteProject:function(){console.log("cwosant")}}})(),n=function(){const n=document.querySelector(".add-project");n.style.display="none";const o=document.querySelector(".projects");let c=document.createElement("div");c.className="project-create";let r=document.createElement("input");const a=document.createElement("button");a.className="ok",a.innerText="Ok",a.addEventListener("click",(()=>{const o=r.value;o?(c.remove(),n.style.display="block",t.saveProjects(o),function(t){const n=document.querySelector(".projects"),o=e(t),c=document.createElement("div");c.className="project-container";const r=document.createElement("h2");r.innerText=o.getName();const a=document.createElement("button");a.className="delete-project",a.innerText="X",r.appendChild(a),c.appendChild(r),n.appendChild(c)}(o)):console.log("need a title")}));const s=document.createElement("button");s.className="cancel",s.innerText="Cancel",s.addEventListener("click",(()=>{c.remove(),n.style.display="block"})),c.appendChild(r),c.appendChild(a),c.appendChild(s),o.appendChild(c)},o=function(){document.querySelector(".add-project").addEventListener("click",(()=>{n()}))};document.addEventListener("DOMContentLoaded",(()=>{o(),t.addStorage()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,