(()=>{var e={104:e=>{var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(104),t=n.n(e);const r=e=>{let n=e,r=[],o=t()();return{getName:function(){return n},setName:function(e){n=e},getId:function(){return o},getTasks:function(){return r}}},o=(()=>{let e=[];function n(){return JSON.parse(localStorage.getItem("projects"))}function o(){e=n()}function c(){return e}return{addStorage:function(){localStorage.getItem("projects")||(e.push({taskName:"default project",taskId:t()()}),localStorage.setItem("projects",JSON.stringify(c())))},getStorage:n,getProjects:c,saveProjects:function(t){const n=r(t);o(),e.push({taskName:n.getName(),taskId:n.getId()}),localStorage.setItem("projects",JSON.stringify(c()))},deleteProject:function(t){const n=e.findIndex((e=>e.taskId===t));o(),e.splice(n,1),localStorage.setItem("projects",JSON.stringify(c()))},updateProjectArray:o}})(),c=(()=>{function e(e){const n=document.querySelector(".projects"),o=r(e),c=document.createElement("div");c.className="project-container",c.id=o.getId();const a=document.createElement("h2");a.innerText=o.getName();const s=document.createElement("button");s.className="delete-project",s.id=o.getId(),s.innerText="X",s.addEventListener("click",t),a.appendChild(s),c.appendChild(a),n.appendChild(c)}function t(e){const t=document.querySelector(".projects"),n=e.target.id,r=document.getElementById(n);t.removeChild(r),o.deleteProject(n)}return{cwosantLog:function(){return"cwosant"},startNewProject:function(){const t=document.querySelector(".add-project");t.style.display="none";const n=document.querySelector(".projects");let r=document.createElement("div");r.className="project-create";let c=document.createElement("input");const a=document.createElement("button");a.className="ok",a.innerText="Ok",a.addEventListener("click",(()=>{const n=c.value;n?(r.remove(),t.style.display="block",o.saveProjects(n),e(n)):console.log("need a title")}));const s=document.createElement("button");s.className="cancel",s.innerText="Cancel",s.addEventListener("click",(()=>{r.remove(),t.style.display="block"})),r.appendChild(c),r.appendChild(a),r.appendChild(s),n.appendChild(r)},addProject:e}})(),a=function(){o.addStorage(),o.updateProjectArray(),o.getProjects().forEach((e=>{c.addProject(e.taskName)})),document.querySelector(".add-project").addEventListener("click",(()=>{c.startNewProject()}))};document.addEventListener("DOMContentLoaded",(()=>{a(),o.addStorage()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,