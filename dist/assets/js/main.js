(()=>{"use strict";const e=e=>{let t,n=e,o=[];return{getName:function(){return n},setName:function(e){n=e},getPosition:function(){return t},setPosition:function(e){t=e},getTasks:function(){return o}}},t=(()=>{let t=[];function n(){return JSON.parse(localStorage.getItem("projects"))}function o(){t=n()}function c(){return t}return{addStorage:function(){localStorage.getItem("projects")||(t.push("default project"),localStorage.setItem("projects",JSON.stringify(c())))},getStorage:n,getProjects:c,saveProjects:function(n){const r=e(n);o(),t.push(r.getName()),localStorage.setItem("projects",JSON.stringify(c()))},deleteProject:function(){console.log("cwosant")},updateProjectArray:o}})(),n=(()=>{function n(t){const n=document.querySelector(".projects"),o=e(t),c=document.createElement("div");c.className="project-container";const r=document.createElement("h2");r.innerText=o.getName();const a=document.createElement("button");a.className="delete-project",a.innerText="X",r.appendChild(a),c.appendChild(r),n.appendChild(c)}return{cwosantLog:function(){return"cwosant"},startNewProject:function(){const e=document.querySelector(".add-project");e.style.display="none";const o=document.querySelector(".projects");let c=document.createElement("div");c.className="project-create";let r=document.createElement("input");const a=document.createElement("button");a.className="ok",a.innerText="Ok",a.addEventListener("click",(()=>{const o=r.value;o?(c.remove(),e.style.display="block",t.saveProjects(o),n(o)):console.log("need a title")}));const s=document.createElement("button");s.className="cancel",s.innerText="Cancel",s.addEventListener("click",(()=>{c.remove(),e.style.display="block"})),c.appendChild(r),c.appendChild(a),c.appendChild(s),o.appendChild(c)},addProject:n}})(),o=function(){t.addStorage(),t.updateProjectArray(),t.getProjects().forEach((e=>{n.addProject(e)})),document.querySelector(".add-project").addEventListener("click",(()=>{n.startNewProject()}))};document.addEventListener("DOMContentLoaded",(()=>{o(),t.addStorage()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,